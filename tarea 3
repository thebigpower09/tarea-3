namespace SalesOnlineSingleProject
{
    public class Producto
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public decimal Precio { get; set; }
    }
}


using Microsoft.EntityFrameworkCore;

namespace SalesOnlineSingleProject
{
    public class SalesOnlineContext : DbContext
    {
        public DbSet<Producto> Productos { get; set; }

        public SalesOnlineContext(DbContextOptions<SalesOnlineContext> options) : base(options)
        {
        }
    }
}


using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;

namespace SalesOnlineSingleProject.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductosController : ControllerBase
    {
        private readonly SalesOnlineContext _context;

        public ProductosController(SalesOnlineContext context)
        {
            _context = context;
        }

        [HttpGet]
        public ActionResult<IEnumerable<Producto>> GetProductos()
        {
            return _context.Productos.ToList();
        }

        [HttpGet("{id}")]
        public ActionResult<Producto> GetProducto(int id)
        {
            var producto = _context.Productos.Find(id);
            if (producto == null)
            {
                return NotFound();
            }
            return producto;
        }

        [HttpPost]
        public ActionResult<Producto> CreateProducto(Producto producto)
        {
            _context.Productos.Add(producto);
            _context.SaveChanges();

            return CreatedAtAction(nameof(GetProducto), new { id = producto.Id }, producto);
        }

        [HttpPut("{id}")]
        public IActionResult UpdateProducto(int id, Producto producto)
        {
            if (id != producto.Id)
            {
                return BadRequest();
            }

            _context.Entry(producto).State = EntityState.Modified;
            _context.SaveChanges();

            return NoContent();
        }

        [HttpDelete("{id}")]
        public IActionResult DeleteProducto(int id)
        {
            var producto = _context.Productos.Find(id);
            if (producto == null)
            {
                return NotFound();
            }

            _context.Productos.Remove(producto);
            _context.SaveChanges();

            return NoContent();
        }
    }
}



using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Configuraci√≥n de Entity Framework InMemory
builder.Services.AddDbContext<SalesOnlineContext>(options =>
    options.UseInMemoryDatabase("SalesOnlineDB"));

// Agrega los servicios para controladores
builder.Services.AddControllers();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.UseRouting();

app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers();
});

app.Run();
