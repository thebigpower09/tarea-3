using System;
using System.Collections.Generic;
using System.Linq;

// =======================================
// School.Domain
// =======================================

namespace School.Domain
{
    // Core/BaseEntity.cs
    public abstract class BaseEntity
    {
        public int Id { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime UpdatedDate { get; set; }
    }

    // Core/Person.cs
    public abstract class Person : BaseEntity
    {
        public string Name { get; set; }
        public string Email { get; set; }
    }

    // Entities/Course.cs
    public class Course : BaseEntity
    {
        public string Title { get; set; }
        public int Credits { get; set; }
    }

    // Entities/Department.cs
    public class Department : BaseEntity
    {
        public string Name { get; set; }
        public string Location { get; set; }
    }

    // Entities/Instructor.cs
    public class Instructor : Person
    {
        public string Department { get; set; }
    }

    // Entities/Student.cs
    public class Student : Person
    {
        public DateTime EnrollmentDate { get; set; }
    }

    // Repository/IGenericRepository.cs
    public interface IGenericRepository<T> where T : BaseEntity
    {
        IEnumerable<T> GetAll();
        T GetById(int id);
        void Add(T entity);
        void Update(T entity);
        void Delete(int id);
    }
}

// =======================================
// School.Infrastructure
// =======================================

namespace School.Infrastructure
{
    using School.Domain;

    // Context/SchoolContext.cs
    public class SchoolContext
    {
        public List<Course> Courses { get; set; } = new List<Course>();
        public List<Department> Departments { get; set; } = new List<Department>();
        public List<Instructor> Instructors { get; set; } = new List<Instructor>();
        public List<Student> Students { get; set; } = new List<Student>();
    }

    // Core/BaseRepository.cs
    public class BaseRepository<T> : IGenericRepository<T> where T : BaseEntity
    {
        private readonly List<T> _dbSet;

        public BaseRepository(List<T> dbSet)
        {
            _dbSet = dbSet;
        }

        public IEnumerable<T> GetAll() => _dbSet;

        public T GetById(int id) => _dbSet.FirstOrDefault(e => e.Id == id);

        public void Add(T entity)
        {
            entity.Id = _dbSet.Count + 1;
            entity.CreatedDate = DateTime.Now;
            entity.UpdatedDate = DateTime.Now;
            _dbSet.Add(entity);
        }

        public void Update(T entity)
        {
            var existing = GetById(entity.Id);
            if (existing != null)
            {
                entity.UpdatedDate = DateTime.Now;
                _dbSet[_dbSet.IndexOf(existing)] = entity;
            }
        }

        public void Delete(int id)
        {
            var entity = GetById(id);
            if (entity != null) _dbSet.Remove(entity);
        }
    }

    // Exceptions/CourseException.cs
    public class CourseException : Exception
    {
        public CourseException(string message) : base(message) { }
    }

    // Exceptions/DepartmentException.cs
    public class DepartmentException : Exception
    {
        public DepartmentException(string message) : base(message) { }
    }

    // Interfaces/ICourseRepository.cs
    public interface ICourseRepository : IGenericRepository<Course> { }

    // Interfaces/IDepartmentRepository.cs
    public interface IDepartmentRepository : IGenericRepository<Department> { }

    // Models/CursoModel.cs
    public class CursoModel
    {
        public string Title { get; set; }
        public int Credits { get; set; }
    }

    // Models/DepartmentModel.cs
    public class DepartmentModel
    {
        public string Name { get; set; }
        public string Location { get; set; }
    }

    // Repositories/CourseRepository.cs
    public class CourseRepository : BaseRepository<Course>, ICourseRepository
    {
        public CourseRepository(SchoolContext context) : base(context.Courses) { }
    }

    // Repositories/DepartmentRepository.cs
    public class DepartmentRepository : BaseRepository<Department>, IDepartmentRepository
    {
        public DepartmentRepository(SchoolContext context) : base(context.Departments) { }
    }
}

// =======================================
// Main Program
// =======================================

namespace SchoolApp
{
    using School.Domain;
    using School.Infrastructure;

    class Program
    {
        static void Main(string[] args)
        {
            var context = new SchoolContext();

            // Course Repository Example
            var courseRepository = new CourseRepository(context);
            courseRepository.Add(new Course { Title = "Mathematics", Credits = 4 });
            courseRepository.Add(new Course { Title = "History", Credits = 3 });

            Console.WriteLine("Courses:");
            foreach (var course in courseRepository.GetAll())
            {
                Console.WriteLine($"- {course.Title} ({course.Credits} credits)");
            }

            // Department Repository Example
            var departmentRepository = new DepartmentRepository(context);
            departmentRepository.Add(new Department { Name = "Science", Location = "Building A" });

            Console.WriteLine("\nDepartments:");
            foreach (var department in departmentRepository.GetAll())
            {
                Console.WriteLine($"- {department.Name} (Location: {department.Location})");
            }
        }
    }
}

