using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

var builder = WebApplication.CreateBuilder(args);

// Configura la base de datos en memoria y servicios
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseInMemoryDatabase("ProductosDB"));
builder.Services.AddControllersWithViews();

var app = builder.Build();

// Middleware para rutas y controladores
app.UseRouting();
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers(); // Mapea la API
    endpoints.MapDefaultControllerRoute(); // Mapea el frontend (MVC)
});

app.Run();

// ==================== Contexto y Entidad ====================

public class Producto
{
    public int Id { get; set; }
    public string Nombre { get; set; }
    public decimal Precio { get; set; }
    public int Stock { get; set; }
}

public class AppDbContext : DbContext
{
    public DbSet<Producto> Productos { get; set; }

    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }
}

// ==================== API Controller ====================

[Route("api/[controller]")]
[ApiController]
public class ProductosApiController : ControllerBase
{
    private readonly AppDbContext _context;

    public ProductosApiController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Producto>>> GetProductos()
    {
        return await _context.Productos.ToListAsync();
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<Producto>> GetProducto(int id)
    {
        var producto = await _context.Productos.FindAsync(id);
        if (producto == null) return NotFound();
        return producto;
    }

    [HttpPost]
    public async Task<ActionResult<Producto>> CreateProducto(Producto producto)
    {
        _context.Productos.Add(producto);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetProducto), new { id = producto.Id }, producto);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateProducto(int id, Producto producto)
    {
        if (id != producto.Id) return BadRequest();
        _context.Entry(producto).State = EntityState.Modified;
        await _context.SaveChangesAsync();
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteProducto(int id)
    {
        var producto = await _context.Productos.FindAsync(id);
        if (producto == null) return NotFound();
        _context.Productos.Remove(producto);
        await _context.SaveChangesAsync();
        return NoContent();
    }
}

// ==================== Web Controller ====================

[Route("[controller]/[action]")]
public class ProductosController : Controller
{
    private readonly AppDbContext _context;

    public ProductosController(AppDbContext context)
    {
        _context = context;
    }

    public async Task<IActionResult> Index()
    {
        var productos = await _context.Productos.ToListAsync();
        return View(productos);
    }

    public IActionResult Create()
    {
        return View();
    }

    [HttpPost]
    public async Task<IActionResult> Create(Producto producto)
    {
        if (ModelState.IsValid)
        {
            _context.Productos.Add(producto);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }
        return View(producto);
    }

    public async Task<IActionResult> Edit(int id)
    {
        var producto = await _context.Productos.FindAsync(id);
        if (producto == null) return NotFound();
        return View(producto);
    }

    [HttpPost]
    public async Task<IActionResult> Edit(Producto producto)
    {
        if (ModelState.IsValid)
        {
            _context.Update(producto);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }
        return View(producto);
    }

    public async Task<IActionResult> Delete(int id)
    {
        var producto = await _context.Productos.FindAsync(id);
        if (producto == null) return NotFound();
        return View(producto);
    }

    [HttpPost, ActionName("Delete")]
    public async Task<IActionResult> DeleteConfirmed(int id)
    {
        var producto = await _context.Productos.FindAsync(id);
        _context.Productos.Remove(producto);
        await _context.SaveChangesAsync();
        return RedirectToAction(nameof(Index));
    }
}

// ==================== Vistas (Frontend) ====================

// Crea una carpeta en el proyecto: "Views/Productos"

// Archivo: Views/Productos/Index.cshtml
@model List<Producto>
<h2>Lista de Productos</h2>
<a href="/Productos/Create">Crear Nuevo Producto</a>
<table>
    <tr>
        <th>Nombre</th>
        <th>Precio</th>
        <th>Stock</th>
        <th>Acciones</th>
    </tr>
    @foreach (var producto in Model)
    {
        <tr>
            <td>@producto.Nombre</td>
            <td>@producto.Precio</td>
            <td>@producto.Stock</td>
            <td>
                <a href="/Productos/Edit/@producto.Id">Editar</a> |
                <a href="/Productos/Delete/@producto.Id">Eliminar</a>
            </td>
        </tr>
    }
</table>

// Archivo: Views/Productos/Create.cshtml
@model Producto
<h2>Crear Producto</h2>
<form method="post" action="/Productos/Create">
    <label>Nombre:</label>
    <input asp-for="Nombre" />
    <br />
    <label>Precio:</label>
    <input asp-for="Precio" />
    <br />
    <label>Stock:</label>
    <input asp-for="Stock" />
    <br />
    <button type="submit">Guardar</button>
</form>

// Archivo: Views/Productos/Edit.cshtml
@model Producto
<h2>Editar Producto</h2>
<form method="post" action="/Productos/Edit">
    <input type="hidden" asp-for="Id" />
    <label>Nombre:</label>
    <input asp-for="Nombre" />
    <br />
    <label>Precio:</label>
    <input asp-for="Precio" />
    <br />
    <label>Stock:</label>
    <input asp-for="Stock" />
    <br />
    <button type="submit">Guardar Cambios</button>
</form>

// Archivo: Views/Productos/Delete.cshtml
@model Producto
<h2>Eliminar Producto</h2>
<p>¿Está seguro de que desea eliminar este producto?</p>
<p>@Model.Nombre</p>
<form method="post" action="/Productos/DeleteConfirmed/@Model.Id">
    <button type="submit">Eliminar</button>
</form>
